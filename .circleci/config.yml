git default: &defaults
  docker:
      - image: gcr.io/${GCLOUD_ACTIVO_PROJECT_V2}/activo-api-ci-image
        auth:
          username: _json_key
          password: '${SERVICE_ACCOUNT_V2}'
        environment:
          ACTIVO_PATH: /home/circleci/activo-api
          CC_TEST_REPORTER_ID: ${CC_TEST_REPORTER_ID}
          FLASK_ENV: testing
          FLASK_APP: manage.py
          PGUSER: circleci
          PG_HOST: localhost
          TEST_DATABASE_URL: postgresql://circleci@localhost/circlecidb
      - image: postgres:9.6
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: activo_test
          POSTGRES_PASSWORD: ''
  # specify working directory
  working_directory: ~/activo-api

release_default: &release_defaults
  docker:
    - image: gcr.io/${GCLOUD_ACTIVO_PROJECT_V2}/activo-api-ci-image
      auth:
        username: _json_key
        password: '${SERVICE_ACCOUNT_V2}'
  working_directory: ~/activo-api

cmd_wait_for_postgres: &cmd_wait_for_postgres
  run:
    name: Waiting for Postgres to be ready
    command: |
      dockerize -wait tcp://localhost:5432 -timeout 1m

cmd_install_dependencies: &cmd_install_dependencies
  run:
    name: Install dependencies
    command: |
      curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
      export PATH="/home/circleci/.pyenv/bin:$PATH"
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
      pyenv install 3.6.5 -s
      pyenv local 3.6.5
      pip3 install --user pipenv==2018.5.18
      python3 -m pip install pipenv==2018.5.18
      python3 -m pipenv install

# clone infrastructure repository in order to
# make all files needed to maintain the infrastructure be available
cmd_clone_infra_repo: &cmd_clone_infra_repo
  run:
    name: Clone infrastructure repository and create service Account
    command: |
      git clone -b develop ${INFRASTRUCTURE_REPO} /home/circleci/activo-infra
      touch /home/circleci/activo-infra/ansible/account.json
      echo ${SERVICE_ACCOUNT_V2} > /home/circleci/activo-infra/ansible/account.json

# create cluster for staging
cmd_create_cluster_for_staging: &cmd_create_cluster_for_staging
  run:
    name: Setup cluster for staging
    command: |
      # change directory into the repo directory
      # set the project
      # authenticate with the service account
      cd /home/circleci/activo-infra
      gcloud config set project ${GCLOUD_ACTIVO_PROJECT_V2}
      gcloud auth activate-service-account --key-file=./ansible/account.json
      export GOOGLE_CREDENTIALS=${SERVICE_ACCOUNT_V2}

      # change directory into the gke(google kubernetes engine) directory
      # intialize terraform
      # select the workspace or create if it does not exist
      # apply the terraform command
      cd /home/circleci/activo-infra/terraform/gke
      terraform init
      terraform workspace select staging || terraform workspace create staging
      terraform apply -lock=false -auto-approve -var "environment=${ENV_STAGING}" \
      -var "maintainer=${MAINTAINER}" -var "owner=${OWNER}" \
      -var "project=${GCLOUD_ACTIVO_PROJECT_V2}" -var "region=europe-west1" \
      -var "location=europe-west1-b" -var "product=${PRODUCT}"

      # connect to the staging cluster that is already created
      # create staging namespace or echo 'resource already created if it exist'
      # create ingress nginx namespace or echo 'resource already created if it exist'
      # create the cluster role binding
      gcloud container clusters get-credentials ${K8S_CLUSTER_STAGING_V2} \
      --zone europe-west1-b --project ${GCLOUD_ACTIVO_PROJECT_V2}
      kubectl create namespace staging || echo "resource already exist"
      kubectl create namespace ingress-nginx || echo "resource already exist"
      kubectl apply -f /home/circleci/activo-infra/deploy/mandatory.yml -n ingress-nginx
      kubectl create clusterrolebinding cluster-admin-binding \
      --clusterrole cluster-admin --user $(gcloud config get-value account) || echo "resource already exist"

      # copy the ssl key and ssl cert from the bucket into the directory
      # create the tls cert to be stored as secret
      gsutil cp gs://activo/${SSL_KEY} /home/circleci/activo-infra
      gsutil cp gs://activo/${SSL_CERT} /home/circleci/activo-infra
      kubectl create secret tls activo-tls-cert \
      --key /home/circleci/activo-infra/${SSL_KEY} \
      --cert /home/circleci/activo-infra/${SSL_CERT} -n staging || echo "resource already exist"

# create cluster for production
cmd_create_cluster_for_production: &cmd_create_cluster_for_production
  run:
    name: Setup cluster for production
    command: |
      # change directory into the repo directory
      # set the project
      # authenticate with the service account
      cd /home/circleci/activo-infra
      gcloud config set project ${GCLOUD_ACTIVO_PROJECT_V2}
      gcloud auth activate-service-account --key-file=./ansible/account.json

      # change directory into the gke(google kubernetes engine) directory
      # intialize terraform
      # select the workspace or create if it does not exist
      # apply the terraform command
      cd /home/circleci/activo-infra/terraform/gke
      terraform init
      export GOOGLE_CREDENTIALS=${SERVICE_ACCOUNT_V2}
      terraform workspace list
      terraform workspace select production || terraform workspace new production
      terraform apply -lock=false -auto-approve -var "environment=${ENV_PRODUCTION}" \
      -var "maintainer=${MAINTAINER}" -var "owner=${OWNER}" -var "project=${GCLOUD_ACTIVO_PROJECT_V2}" \
      -var "region=europe-west1" -var "location=europe-west1-b" \
      -var "product=${PRODUCT}"
      gcloud container clusters get-credentials ${K8S_CLUSTER_PROD_V2} \
      --zone europe-west1-b --project ${GCLOUD_ACTIVO_PROJECT_V2}

      # connect to the production cluster that is already created
      # create production namespace or echo 'resource already created if it exist'
      # create ingress nginx namespace or echo 'resource already created if it exist'
      # create the cluster role binding
      kubectl create namespace production || echo "resource already exist"
      kubectl create namespace ingress-nginx || echo "resource already exist"
      kubectl create clusterrolebinding cluster-admin-binding \
      --clusterrole cluster-admin \
      --user $(gcloud config get-value account) || echo "resource already exist"
      kubectl apply -f /home/circleci/activo-infra/deploy/mandatory.yml -n ingress-nginx

      # copy the ssl key and ssl cert from the bucket into the directory
      # create the tls cert to be stored as secret
      gsutil cp gs://activo/${SSL_KEY} /home/circleci/activo-infra
      gsutil cp gs://activo/${SSL_CERT} /home/circleci/activo-infra
      kubectl create secret tls activo-tls-cert \
      --key /home/circleci/activo-infra/${SSL_KEY} \
      --cert /home/circleci/activo-infra/${SSL_CERT} -n production || echo "resource already exist"

      # create the secret files(credential and credentials) for database backups
      kubectl -n production create secret generic credential \
      --from-file=key.json=${SERVICE_ACCOUNT_V2} || echo "resource already exist" \
      kubectl -n production create secret generic credentials \
      --from-file=sql.json=${SERVICE_ACCOUNT_V2} || echo "resource already exist"

# create qa cluster
cmd_create_cluster_for_qa: &cmd_create_cluster_for_qa
  run:
    name: Setup cluster for qa
    command: |
      # change directory into the repo directory
      # set the project
      # authenticate with the service account
      cd /home/circleci/activo-infra
      gcloud config set project ${GCLOUD_ACTIVO_PROJECT_V2}
      gcloud auth activate-service-account --key-file=./ansible/account.json

      # change directory into the gke(google kubernetes engine) directory
      # intialize terraform
      # select the workspace or create if it does not exist
      # apply the terraform command
      cd /home/circleci/activo-infra/terraform/gke
      terraform init
      export GOOGLE_CREDENTIALS=${SERVICE_ACCOUNT_V2}
      terraform workspace list
      terraform workspace select qa || terraform workspace new qa
      terraform apply -lock=false -auto-approve \
      -var "environment=${ENV_QA}" -var "maintainer=${MAINTAINER}" \
      -var "owner=${OWNER}" -var "project=${GCLOUD_ACTIVO_PROJECT_V2}" \
      -var "region=europe-west1" -var "location=europe-west1-b" -var "product=${PRODUCT}"

      # connect to the production cluster that is already created
      # create production namespace or echo 'resource already created if it exist'
      # create ingress nginx namespace or echo 'resource already created if it exist'
      # create the cluster role binding
      gcloud container clusters get-credentials ${K8S_CLUSTER_QA_V2} \
      --zone europe-west1-b --project ${GCLOUD_ACTIVO_PROJECT_V2}
      kubectl create namespace activo-qa-cluster || echo "resource already exist"
      kubectl create namespace ingress-nginx || echo "resource already exist"
      kubectl create clusterrolebinding cluster-admin-binding \
      --clusterrole cluster-admin \
      --user $(gcloud config get-value account) || echo "resource already exist"
      kubectl apply -f /home/circleci/activo-infra/deploy/mandatory.yml -n ingress-nginx

      # copy the ssl key and ssl cert from the bucket into the directory
      # create the tls cert to be stored as secret
      gsutil cp gs://activo/${SSL_KEY} /home/circleci/activo-infra
      gsutil cp gs://activo/${SSL_CERT} /home/circleci/activo-infra
      kubectl create secret tls activo-tls-cert \
      --key /home/circleci/activo-infra/${SSL_KEY} \
      --cert /home/circleci/activo-infra/${SSL_CERT} -n activo-qa-cluster || echo "resource already exist"

# setup environment for k8s GCP authentication and cluster connection
# currently there are three cluster environments on GCP
# Staging, Production, and Quality Assurance(QA) environments
cmd_set_up_k8s_cluster_prod: &cmd_set_up_k8s_cluster_prod
  run:
    name: Setup environment for kubernetes deployment & authentication
    command: |
      cd /home/circleci/activo-infra
      gcloud config set project ${GCLOUD_ACTIVO_PROJECT_V2}
      gcloud auth activate-service-account --key-file=./ansible/account.json
      gcloud container clusters get-credentials ${K8S_CLUSTER_PROD_V2} \
      --zone="europe-west1-b"  --project ${GCLOUD_ACTIVO_PROJECT_V2}

cmd_set_up_k8s_cluster_staging: &cmd_set_up_k8s_cluster_staging
  run:
    name: Setup environment for kubernetes deployment & authentication
    command: |
      cd /home/circleci/activo-infra
      gcloud config set project ${GCLOUD_ACTIVO_PROJECT_V2}
      gcloud auth activate-service-account --key-file=./ansible/account.json
      gcloud container clusters get-credentials ${K8S_CLUSTER_STAGING_V2} \
      --zone="europe-west1-b"  --project ${GCLOUD_ACTIVO_PROJECT_V2}

cmd_set_up_k8s_cluster_qa: &cmd_set_up_k8s_cluster_qa
  run:
    name: Setup environment for kubernetes deployment & authentication
    command: |
      echo ${SERVICE_ACCOUNT_V2} > /home/circleci/activo-infra/ansible/account.json
      cd /home/circleci/activo-infra
      gcloud config set project ${GCLOUD_ACTIVO_PROJECT_V2}
      gcloud auth activate-service-account --key-file=./ansible/account.json
      gcloud container clusters get-credentials ${K8S_CLUSTER_QA_V2} \
      --zone="europe-west1-b"  --project ${GCLOUD_ACTIVO_PROJECT_V2}

cmd_install_dependencies: &cmd_save_cache
    save_cache:
        key: api-dependencies-{{ checksum "Pipfile.lock" }}
        paths:
          - $(python3 -m pipenv --venv)

cmd_restore_cache: &cmd_restore_cache
    restore_cache:
        keys:
          - api-dependencies-{{ checksum "Pipfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - api-dependencies-

cmd_download_cc_test_reporter: &cmd_download_cc_test_reporter
  run:
    name:  Download cc-test-reporter
    command: |
      mkdir -p tmp/
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > /tmp/cc-test-reporter
      chmod +x /tmp/cc-test-reporter

cmd_attach_workspace: &cmd_attach_workspace
  attach_workspace:
    at: tmp/

# Python CircleCI 2.0 configuration file
version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - *cmd_install_dependencies
      - *cmd_save_cache
      - *cmd_wait_for_postgres
      - run:
          name: Set up database
          command: |
            source $(python3 -m pipenv --venv)/bin/activate
            # flask db init
            # flask db migrate
            flask db upgrade
      - *cmd_download_cc_test_reporter

  # Job to run Unit Tests
  run_tests:
    <<: *defaults
    steps:
      - checkout
      - *cmd_attach_workspace
      - *cmd_install_dependencies
      - *cmd_save_cache
      - *cmd_wait_for_postgres
      - *cmd_restore_cache
      - *cmd_download_cc_test_reporter
      - run:
          name: Run tests
          command: |
            source $(python3 -m pipenv --venv)/bin/activate
            pytest --cov=api/ tests --cov-report xml
            /tmp/cc-test-reporter format-coverage coverage.xml -t "coverage.py" -o "tmp/cc.testreport.json"
      - persist_to_workspace:
          root: tmp/
          paths:
            - cc.testreport.json

  # Job to upload test report/coverage to code climate
  upload_coverage:
    <<: *defaults
    steps:
      - checkout
      - *cmd_download_cc_test_reporter
      - *cmd_attach_workspace
      - run:
          name: Upload coverage results to Code Climate
          command: |
            /tmp/cc-test-reporter upload-coverage -i tmp/cc.testreport.json

  # Job to build docker images for Staging and Production
  # K8s deployment
  build_docker_image:
      <<: *defaults
      steps:
        - checkout
        - setup_remote_docker
        - *cmd_clone_infra_repo
        - run:
            name: Bake Docker Image
            command: |
                  # build image for development
                  if [[ "${CIRCLE_BRANCH}" == "develop" ]]; then
                    # copy env vars
                    env >> .env
                    sed -i 's/testing/staging/g' .env

                    # replace the index to the one assigned to staging
                    sed -i  "s|:6379\/7|:6379\/8|g" .env

                    echo "DATABASE_URI=${STAGING_DB_URL_V2}" >> .env

                    # build docker image and push to GCR
                    docker login -u _json_key -p "$(echo $SERVICE_ACCOUNT_V2)" https://gcr.io
                    docker build -t gcr.io/${GCLOUD_ACTIVO_PROJECT_V2}/activo-api-${DEPLOY_STAGING_ENV}:${CIRCLE_SHA1} -f docker-release/Dockerfile .
                    docker push gcr.io/${GCLOUD_ACTIVO_PROJECT_V2}/activo-api-${DEPLOY_STAGING_ENV}:${CIRCLE_SHA1}
                  fi

                  #  build image for production
                  if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
                    # copy env vars
                    env
                    env >> .env
                    # replace the env value for deployment from 'staging' to 'production'
                    sed -i 's/testing/production/g' .env

                    echo "DATABASE_URI=${PROD_DB_URL_V2}" >> .env

                    # replace the index to the one assigned to production
                    sed -i  "s|:6379\/7|:6379\/9|g" .env

                    # build docker image and push to GCR
                    docker login -u _json_key -p "$(echo $SERVICE_ACCOUNT_V2)" https://gcr.io
                    docker build -t gcr.io/${GCLOUD_ACTIVO_PROJECT_V2}/activo-api-${DEPLOY_PROD_ENV}:${CIRCLE_SHA1} -f docker-release/Dockerfile .
                    docker push gcr.io/${GCLOUD_ACTIVO_PROJECT_V2}/activo-api-${DEPLOY_PROD_ENV}:${CIRCLE_SHA1}
                  fi

  # Job to build docker image for the Quality Assurance environment
  build_docker_image_qa:
      <<: *defaults
      steps:
        - checkout
        - setup_remote_docker
        - *cmd_install_dependencies
        - *cmd_clone_infra_repo
        - attach_workspace:
            at: ~/activo-api
        - run:
            name: Bake Docker Image
            command: |
              if [[ "${CIRCLE_BRANCH}" =~ "master" ]]; then
                # copy env vars
                env >> .env

                # Replacing the redis db index and the FLASK_ENV valiue inline with sed.

                sed -i 's/testing/staging/g' .env

                echo "DATABASE_URI=${DATABASE_URI_QA_V2}" >> .env
                cat .env

                # Build docker image and push to GCR Andela-Learning
                docker login -u _json_key -p "$(echo $SERVICE_ACCOUNT_V2)" https://gcr.io
                docker build -t gcr.io/${GCLOUD_ACTIVO_PROJECT_V2}/activo-api-${DEPLOY_ENV_QA}:${CIRCLE_SHA1} -f docker-release/Dockerfile .
                docker push gcr.io/${GCLOUD_ACTIVO_PROJECT_V2}/activo-api-${DEPLOY_ENV_QA}:${CIRCLE_SHA1}
              fi

# Release jobs
  release_to_sandbox:
    <<: *release_defaults
    steps:
      - run: exit 0

  release_to_staging:
    <<: *release_defaults
    steps:
      - run: exit 0

  release_to_production:
    <<: *release_defaults
    steps:
      - run: exit 0


  # Staging Deployment
  deploy_staging:
    #  docker environment for running k8s deployment
    docker:
      - image: gcr.io/${GCLOUD_ACTIVO_PROJECT_V2}/activo-api-ci-ansible
        auth:
          username: _json_key
          password: '${SERVICE_ACCOUNT_V2}'
    steps:
      - checkout
      - *cmd_clone_infra_repo
      - *cmd_create_cluster_for_staging
      - *cmd_set_up_k8s_cluster_staging
      - attach_workspace:
          at: ~/activo-api
      - run:
          name: install envsubst
          command: |
            sudo apt-get install -y gettext

            # This upgrade fixes ansible 503 service unavailable error
            # The error happened because of a connection was unable to be
            # established during the provision nginx service object task
            sudo pip install openshift --upgrade
      - run:
          name: Deploy to Staging
          command: |
            if [[ "$CIRCLE_BRANCH" == "develop" ]]; then
              # use envsubst to run run variable substitution
              GCLOUD_ACTIVO_PROJECT=${GCLOUD_ACTIVO_PROJECT_V2}
              export DEPLOYMENT_ENVIRONMENT=${DEPLOY_STAGING_ENV}
              export K8S_INGRESS_IP=${K8S_STAGING_STATIC_IP_V2}
              export WEB_HOST_DOMAIN=${ACTIVO_WEB_STAGING_URL}
              export API_HOST_DOMAIN=${ACTIVO_API_STAGING_URL}
              cd /home/circleci/activo-infra

              envsubst < ./deploy/api/deployment.yml.tpl > deployment.yml
              envsubst < ./deploy/shared/shared-ingress-service.yml.tpl > ingress.yml
              envsubst < ./deploy/api/service.yml.tpl > service.yml
              envsubst < ./deploy/api/autoscaler.yml.tpl > autoscaler.yml
              envsubst < ./deploy/shared/nginx-service.yml.tpl > nginx-service.yml

              # Authenticate for ansible-playbook
              echo ${SERVICE_ACCOUNT_V2} > /home/circleci/activo-infra/ansible/account.json
              export GOOGLE_APPLICATION_CREDENTIALS=/home/circleci/activo-infra/ansible/account.json

              ansible-playbook ./ansible/playbook.main.yml -vvv

              # notify slack
              bash ./deploy/notify_slack.sh
            fi

  # production deployment
  deploy_production:
    #  docker environment for running k8s deployment
    docker:
      - image: gcr.io/${GCLOUD_ACTIVO_PROJECT_V2}/activo-api-ci-ansible
        auth:
          username: _json_key
          password: '${SERVICE_ACCOUNT_V2}'
    steps:
      - checkout
      - *cmd_clone_infra_repo
      - *cmd_create_cluster_for_production
      - *cmd_set_up_k8s_cluster_prod
      - attach_workspace:
          at: ~/activo-api
      - run:
          name: install envsubst
          command: |
            sudo apt-get install -y gettext

            # This upgrade fixes ansible 503 service unavailable error
            # The error happened because of a connection was unable to be
            # established during the provision nginx service object task
            sudo pip install openshift --upgrade
      - deploy:
          name: Deploy to production
          command: |
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
               # use envsubst to run run variable substitution
              GCLOUD_ACTIVO_PROJECT=${GCLOUD_ACTIVO_PROJECT_V2}
              export DEPLOYMENT_ENVIRONMENT=${DEPLOY_PROD_ENV}
              export K8S_INGRESS_IP=${K8S_PROD_STATIC_IP_V2}
              export WEB_HOST_DOMAIN=${ACTIVO_WEB_PROD_URL}
              export API_HOST_DOMAIN=${ACTIVO_API_PROD_URL}
              cd /home/circleci/activo-infra

              envsubst < ./deploy/api/deployment.yml.tpl > deployment.yml
              envsubst < ./deploy/shared/shared-ingress-service.yml.tpl > ingress.yml
              envsubst < ./deploy/api/service.yml.tpl > service.yml
              envsubst < ./deploy/api/autoscaler.yml.tpl > autoscaler.yml
              envsubst < ./deploy/api/cronjob.yml.tpl > cronjob.yml
              envsubst < ./deploy/shared/nginx-service.yml.tpl > nginx-service.yml

              # Authenticate for ansible-playbook
              echo ${SERVICE_ACCOUNT_V2} > /home/circleci/activo-infra/ansible/account.json
              export GOOGLE_APPLICATION_CREDENTIALS=/home/circleci/activo-infra/ansible/account.json

              ansible-playbook ./ansible/playbook.main.yml -vvv
              kubectl apply -f cronjob.yml

              # notify slack
              bash ./deploy/notify_slack.sh
            fi

  # Step to deploy to the Quality Assurance environment
  deploy_to_qa:
    #  docker environment for running k8s deployment
    docker:
      - image: gcr.io/${GCLOUD_ACTIVO_PROJECT_V2}/activo-api-ci-ansible
        auth:
          username: _json_key
          password: '${SERVICE_ACCOUNT_V2}'
    steps:
      - checkout
      - *cmd_clone_infra_repo
      - *cmd_create_cluster_for_qa
      - *cmd_set_up_k8s_cluster_qa
      - attach_workspace:
          at: ~/activo-api
      - run:
          name: install envsubst
          command: |
            sudo apt-get install -y gettext
            
            # This upgrade fixes ansible 503 service unavailable error
            # The error happened because of a connection was unable to be
            # established during the provision nginx service object task
            sudo pip install openshift --upgrade
      - run:
          name: Deploy to QA environment
          command: |
            # Some variables to be used by envsubst are added below
            GCLOUD_ACTIVO_PROJECT=$GCLOUD_ACTIVO_PROJECT_V2
            export DEPLOYMENT_ENVIRONMENT=${DEPLOY_ENV_QA}
            export K8S_INGRESS_IP=${K8S_QA_INGRESS_IP_V2}
            export WEB_HOST_DOMAIN=${ACTIVO_WEB_QA_DEV_URL}
            export API_HOST_DOMAIN=${ACTIVO_API_QA_DEV_URL}
            cd /home/circleci/activo-infra

            # Use envsubst to make variable substitution while creating
            # new populated files with necessary variables for the k8s objects
            envsubst < ./deploy/api/deployment.yml.tpl > deployment.yml
            envsubst < ./deploy/shared/shared-ingress-service.yml.tpl > ingress.yml
            envsubst < ./deploy/api/service.yml.tpl > service.yml
            envsubst < ./deploy/api/autoscaler.yml.tpl > autoscaler.yml
            envsubst < ./deploy/shared/nginx-service.yml.tpl > nginx-service.yml

            # Authenticate for ansible-playbook
            echo ${SERVICE_ACCOUNT_V2} > /home/circleci/activo-infra/ansible/account.json
            export GOOGLE_APPLICATION_CREDENTIALS=/home/circleci/activo-infra/ansible/account.json

            # Run playbook
            ansible-playbook ./ansible/playbook.main.yml -vvv

  # Step to deploy to heroku
  deploy_to_heroku:
    #  docker environment for running k8s deployment
    docker:
      - image: gcr.io/${GCLOUD_ACTIVO_PROJECT_V2}/activo-api-ci-image
        auth:
          username: _json_key
          password: '${SERVICE_ACCOUNT_V2}'
    steps:
      - checkout
      - setup_remote_docker
      - *cmd_clone_infra_repo
      - attach_workspace:
          at: ~/activo-api
      - run:
          name: Deploy to Heroku
          command: |
            # Deploy to the activo-web sandbox
            if [[ "$CIRCLE_BRANCH" == "develop" ]]; then
              #  copy env vars into the instance
              env
              env >> .env

              # install heroku CLI
              curl https://cli-assets.heroku.com/install.sh | sh

              # Build docker image and push to Heroku registry
              docker login --username=$HEROKU_LOGIN --password=$HEROKU_API_KEY registry.heroku.com

              # login to heroku docker registry
              heroku container:login

              # NOTICE

              # if you are sharing the dyno with a new user
              # ensure that you add the user as a collaborator
              # else they would not be able to push images to the
              # the Heroku registry.

              #  Build docker image for the docker container
              #  Tag and Push image to heroku container registory
              docker build -t registry.heroku.com/activo-new-testing/activo-api-${DEPLOY_STAGING_ENV}:${CIRCLE_SHA1} -f docker-heroku/Dockerfile .
              docker tag registry.heroku.com/activo-new-testing/activo-api-${DEPLOY_STAGING_ENV}:${CIRCLE_SHA1} registry.heroku.com/activo-new-testing/web
              docker push registry.heroku.com/activo-new-testing/web

              # re-tag docker image for another sandbox env and push
              docker tag registry.heroku.com/activo-new-testing/activo-api-${DEPLOY_STAGING_ENV}:${CIRCLE_SHA1} registry.heroku.com/e2e-api-develop/web
              docker push registry.heroku.com/e2e-api-develop/web

              #  release built application to activo-new-testing dyno
              heroku container:release web -a activo-new-testing

              # release application application to e2e-develop-api dyno
              heroku container:release web -a e2e-api-develop

            fi

            # deployment config for sandbox
            if [[ "$CIRCLE_BRANCH" == "sandbox" || "$CIRCLE_BRANCH" == "test-heroku-sandbox" ]]; then
              #  copy env vars into the instance
              env
              env >> .env

              # install heroku CLI
              curl https://cli-assets.heroku.com/install.sh | sh

              # Build docker image and push to Heroku registry
              docker login --username=$HEROKU_LOGIN --password=$HEROKU_API_KEY registry.heroku.com

              # login to heroku docker registry
              heroku container:login

              #  Build docker image for the docker container
              #  Tag and Push image to heroku container registory
              docker build -t registry.heroku.com/activo-api-sandbox/activo-api-sandbox:${CIRCLE_SHA1} -f docker-heroku/Dockerfile .
              docker tag registry.heroku.com/activo-api-sandbox/activo-api-sandbox:${CIRCLE_SHA1} registry.heroku.com/activo-api-sandbox/web
              docker push registry.heroku.com/activo-api-sandbox/web

              #  release built application in heroku
              heroku container:release web -a activo-api-sandbox
            fi

# workflows
workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          type: approval
      - run_tests:
          requires:
            - build
      - upload_coverage:
          requires:
            - run_tests
      - approve_deployment:
          type: approval
          requires:
            - upload_coverage
          filters:
            branches:
              only:
                - develop
                - master
      - build_docker_image:
          filters:
            branches:
              only:
                - master
                - develop
            tags:
              only:
                - /v[0-9]+(\.[0-9]+)*/
      - build_docker_image_qa:
          filters:
            branches:
              only:
                - master
          requires:
            - upload_coverage
      - release_to_staging:
          requires:
            - upload_coverage
            - build_docker_image
            - approve_deployment
          filters:
            branches:
              only:
                - develop
            tags:
              only:
                - /v[0-9]+(\.[0-9]+)*/
      - release_to_production:
          requires:
            - upload_coverage
            - build_docker_image
            - approve_deployment
          filters:
            branches:
              only:
                - master
            tags:
              only:
                - /v[0-9]+(\.[0-9]+)*/
      - deploy_staging:
          requires:
            - release_to_staging
          filters:
            branches:
              only:
                - develop
            tags:
              only:
                - /v[0-9]+(\.[0-9]+)*/
      - deploy_production:
          requires:
            - release_to_production
          filters:
            branches:
              only:
                - master
            tags:
              only:
                - /v[0-9]+(\.[0-9]+)*/
      - deploy_to_qa:
          filters:
            branches:
              only:
                - master
          requires:
            - build_docker_image_qa
      - deploy_to_heroku:
          requires:
            - upload_coverage
            - approve_deployment
          filters:
            branches:
              only:
                - develop
                - sandbox
                - test-heroku-sandbox
            tags:
              only:
                - /v[0-9]+(\.[0-9]+)*/
