#!/bin/sh
#
# Git pre-commit hook to check staged Python files for formatting issues with
# yapf.
#
# INSTALLING:
# Option 1: Copy this file into `.git/hooks/pre-commit`, and mark it as
#           executable.
#           You will need to do this every time the pre-commit hook is changed.
# Option 2: Create a file `.git/hooks/pre-commit` then create a symlink to
#           this file by running the command:
#           `ln -s -f ../../hooks/pre-commit .git/hooks/pre-commit`
#           You will only need to do this once for your local repository.
#
# This requires that yapf is installed and runnable in the environment running
# the pre-commit hook.
#
# When running, this first checks for unstaged changes to staged files, and if
# there are any, it will exit with an error. Files with unstaged changes will be
# printed.
#
# If all staged files have no unstaged changes, it will run yapf against them,
# leaving the formatting changes unstaged. Changed files will be printed.
#
# BUGS: This does not leave staged changes alone when used with the -a flag to
# git commit, due to the fact that git stages ALL unstaged files when that flag
# is used.

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# Find all staged Python files, and exit early if there aren't any.
PYTHON_FILES=(`git diff --name-only --cached --diff-filter=AM | \
  grep --color=never '.py$'`)
if [ ! "$PYTHON_FILES" ]; then
  exit 0
fi

########## PIPENV VERSION ##########
if [ -z $(pipenv run which yapf) ]; then
  echo 'yapf not on path; can not format. Please install yapf:'
  echo '    pipenv install yapf'
  exit 2
else
  echo 'yapf installation found.'
fi
###### END PIPENV VERSION ##########

# Check for unstaged changes to files in the index.
CHANGED_FILES=(`git diff --name-only ${PYTHON_FILES[@]}`)
if [ "$CHANGED_FILES" ]; then
  echo 'You have unstaged changes to some files in your commit; skipping '
  echo 'auto-format. Please stage, stash, or revert these changes. You may '
  echo 'find `git stash -k` helpful here.'
  echo
  echo 'Files with unstaged changes:'
  for file in ${CHANGED_FILES[@]}; do
    echo "  $file"
  done
  exit 1
fi

# Format all staged files, then exit with an error code if any have uncommitted
# changes.
echo
echo 'Formatting staged Python files . . .'
echo

########## PIPENV VERSION ##########
pipenv run yapf -i -r -vv ${PYTHON_FILES[@]}
###### END PIPENV VERSION ##########

# List all formatted files
CHANGED_FILES=(`git diff --name-only ${PYTHON_FILES[@]}`)
if [ "$CHANGED_FILES" ]; then
  echo 'Reformatted staged files. Please review and stage the changes.'
  echo
  echo 'Files updated:'
  for file in ${CHANGED_FILES[@]}; do
    echo "  $file"
  done
  echo 'Checking autoformatted files for residual linting errors . . .'
  echo
  for file in ${CHANGED_FILES[@]}; do
    pylint $file
  done
  exit 1
else
  exit 0
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
